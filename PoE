library("kergp")
library("datasets")
library("MASS")
library("Rcpp")
library("testthat")

start_time=Sys.time()
data_total <-as.matrix(sunspots)
x_total<-c(1:2820)
x_test <-c(2821:3000)
y_total<-data_total[,1]
y_total<-y_total/max(y_total)

#View(data_total)
#plot(data_total,type = 'l')

n<-length(x_total)/4

x_1<-c(0:(n-1)*4+1)
x_2<-c(0:(n-1)*4+2)
x_3<-c(0:(n-1)*4+3)
x_4<-c(1:n*4)

#x_1<-c(1:n)
#x_2<-c((n+1):(2*n))
#x_3<-c((2*n+1):(3*n))
#x_4<-c((3*n+1):(n*4))

y_1<-y_total[x_1]
y_2<-y_total[x_2]
y_3<-y_total[x_3]
y_4<-y_total[x_4]

plot(x_1,y_1,type = 'l',col='blue')

x_1<-as.numeric(x_1)
y_1<-as.numeric(y_1)

x_2<-as.numeric(x_2)
y_2<-as.numeric(y_2)

x_3<-as.numeric(x_3)
y_3<-as.numeric(y_3)

x_4<-as.numeric(x_4)
y_4<-as.numeric(y_4)

x_1<-as.data.frame(x_1)
y_1<-as.data.frame(y_1)
colnames(x_1)<-"x"
colnames(y_1)<-"y1"

x_2<-as.data.frame(x_2)
y_2<-as.data.frame(y_2)
colnames(x_2)<-"x"
colnames(y_2)<-"y2"

x_3<-as.data.frame(x_3)
y_3<-as.data.frame(y_3)
colnames(x_3)<-"x"
colnames(y_3)<-"y3"

x_4<-as.data.frame(x_4)
y_4<-as.data.frame(y_4)
colnames(x_4)<-"x"
colnames(y_4)<-"y4"


kGauss <- function(x1, x2, par) {
  h <- (x1 - x2) / par[2]
  S <- h^2/2
  d2 <- exp(-S)
  K <- par[1] * d2
  d1 <- 2 * K * S / par[2]   
  attr(K, "gradient") <- c(sigma2 = d2, theta = d1)
  return(K)
}
covGauss <- covMan(kernel = kGauss,
                   hasGrad = TRUE,
                   label = "Gaussian kernel",
                   d = 1,
                   inputs = "x",
                   parLower = c(sigma2 = 0.0, theta = 0.0),
                   parUpper = c(sigma2 = Inf, theta = Inf),
                   parNames = c("sigma2", "theta"),
                   par = c(sigma2 = 2,theta = 0.1))

# modèle
start=Sys.time()
mygp_1 <- gp(formula = y1 ~ 1, data = data.frame(y1=y_1, x_1),
           inputs  = "x",
           cov = covGauss,
           parCovIni = c(3,150),
           varNoiseLower = 1e-8, varNoiseUpper = 1e-3)
end1=Sys.time()

time=end1-start


# modèle
mygp_2 <- gp(formula = y2 ~ 1, data = data.frame(y2=y_2, x_2),
             inputs  = "x",
             cov = covGauss,
             parCovIni = c(2,150),
             varNoiseLower = 1e-8, varNoiseUpper = 1e-3)

# modèle
mygp_3 <- gp(formula = y3 ~ 1, data = data.frame(y3=y_3, x_3),
             inputs  = "x",
             cov = covGauss,
             parCovIni = c(2,100),
             varNoiseLower = 1e-8, varNoiseUpper = 1e-3)

end_time<-Sys.time()
time<-end_time-start_time

predMygp_1 <- predict(object = mygp_1, newdata = x_4, type = "UK")

predMygp_2 <- predict(object = mygp_2, newdata = x_4, type = "UK")

predMygp_3 <- predict(object = mygp_3, newdata = x_4, type = "UK")

x_4<-as.matrix(x_4)
y_4<-as.matrix(y_4)

plot(x_4,y_4,type="l",col="red")

plot(x_4, y_4)

lines(x_4,predMygp_1$mean,type="l",col="blue")

lines(x_4, predMygp_1$upper95, lty=2,col="blue")
lines(x_4, predMygp_1$lower95, lty=2,col="blue")

lines(x_4,predMygp_2$mean,type="l",col="green")
lines(x_4, predMygp_2$upper95, lty=2,col="green")
lines(x_4, predMygp_2$lower95, lty=2,col="green")

lines(x_4,predMygp_3$mean,type="l",col="brown")
lines(x_4, predMygp_3$upper95, lty=2,col="brown")
lines(x_4, predMygp_3$lower95, lty=2,col="brown")


Mean <- (predMygp_1$mean/predMygp_1$sd+predMygp_2$mean/predMygp_2$sd+predMygp_3$mean/predMygp_3$sd)/(1/predMygp_1$sd+1/predMygp_2$sd+1/predMygp_3$sd)

lines(x_4, Mean, lty=2,col="black")

Sd <- 1/(1/predMygp_1$sd+1/predMygp_2$sd+1/predMygp_3$sd)
Upper95 <- Mean+1.96*Sd^0.5
Lower95 <- Mean-1.96*Sd^0.5


lines(x_4,Upper95,type="l",col="brown")
lines(x_4,Lower95, lty=2,col="brown")
